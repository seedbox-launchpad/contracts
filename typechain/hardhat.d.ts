/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC721Receiver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Receiver__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "RedKiteWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedKiteWhitelist__factory>;
    getContractFactory(
      name: "FeesAndRulePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FeesAndRulePool__factory>;
    getContractFactory(
      name: "Governor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Governor__factory>;
    getContractFactory(
      name: "ILinearPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILinearPool__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "IPoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPoolFactory__factory>;
    getContractFactory(
      name: "ISwapRouter01",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter01__factory>;
    getContractFactory(
      name: "ISwapRouter02",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISwapRouter02__factory>;
    getContractFactory(
      name: "LinearPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LinearPool__factory>;
    getContractFactory(
      name: "ERC20Mock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Mock__factory>;
    getContractFactory(
      name: "Token",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Token__factory>;
    getContractFactory(
      name: "Pool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pool__factory>;
    getContractFactory(
      name: "PoolFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PoolFactory__factory>;
    getContractFactory(
      name: "PreSaleFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PreSaleFactory__factory>;
    getContractFactory(
      name: "PreSalePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PreSalePool__factory>;
    getContractFactory(
      name: "RedKiteTiers",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RedKiteTiers__factory>;
    getContractFactory(
      name: "TiersV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TiersV2__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ILosslessController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILosslessController__factory>;
    getContractFactory(
      name: "LERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LERC20__factory>;
    getContractFactory(
      name: "SEEDBOX",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SEEDBOX__factory>;
    getContractFactory(
      name: "TradeIn",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TradeIn__factory>;

    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC721Receiver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Receiver>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "RedKiteWhitelist",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedKiteWhitelist>;
    getContractAt(
      name: "FeesAndRulePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FeesAndRulePool>;
    getContractAt(
      name: "Governor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Governor>;
    getContractAt(
      name: "ILinearPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILinearPool>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "IPoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPoolFactory>;
    getContractAt(
      name: "ISwapRouter01",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter01>;
    getContractAt(
      name: "ISwapRouter02",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISwapRouter02>;
    getContractAt(
      name: "LinearPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LinearPool>;
    getContractAt(
      name: "ERC20Mock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Mock>;
    getContractAt(
      name: "Token",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Token>;
    getContractAt(
      name: "Pool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pool>;
    getContractAt(
      name: "PoolFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PoolFactory>;
    getContractAt(
      name: "PreSaleFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PreSaleFactory>;
    getContractAt(
      name: "PreSalePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PreSalePool>;
    getContractAt(
      name: "RedKiteTiers",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RedKiteTiers>;
    getContractAt(
      name: "TiersV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TiersV2>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ILosslessController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILosslessController>;
    getContractAt(
      name: "LERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LERC20>;
    getContractAt(
      name: "SEEDBOX",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SEEDBOX>;
    getContractAt(
      name: "TradeIn",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TradeIn>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
