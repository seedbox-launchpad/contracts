/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface GovernorInterface extends ethers.utils.Interface {
  functions: {
    "addProposal(string,string,bytes)": FunctionFragment;
    "adminCanceledProposals(uint256)": FunctionFragment;
    "adminProposalCancel(bytes)": FunctionFragment;
    "ban(bytes)": FunctionFragment;
    "banList(address)": FunctionFragment;
    "canVote(address)": FunctionFragment;
    "delayPeriod()": FunctionFragment;
    "getProposalStatus(uint256)": FunctionFragment;
    "initialize(address,uint256,uint256)": FunctionFragment;
    "lastProposalCreateTime(address)": FunctionFragment;
    "markAsExecuted(bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "proposalCount()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "proposalsByUsers(address,uint256)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stakingPool()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "userVoteInfo(address,uint256)": FunctionFragment;
    "vote(uint256,bool)": FunctionFragment;
    "votingDetails(uint256,address)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
    "weight(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "addProposal",
    values: [string, string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "adminCanceledProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "adminProposalCancel",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "ban", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "banList", values: [string]): string;
  encodeFunctionData(functionFragment: "canVote", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delayPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProposalStatus",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastProposalCreateTime",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "markAsExecuted",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "proposalsByUsers",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakingPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userVoteInfo",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "votingDetails",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weight", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminCanceledProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "adminProposalCancel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ban", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "banList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delayPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastProposalCreateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "markAsExecuted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalsByUsers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakingPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userVoteInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "votingDetails",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weight", data: BytesLike): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalAdded(uint256,address,uint256,uint256,string,string,bytes)": EventFragment;
    "ProposalCanceledByAdmin(uint256,string)": EventFragment;
    "UserBanned(address,string,bool)": EventFragment;
    "Voted(address,uint256,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCanceledByAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UserBanned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProposalAddedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber, string, string, string] & {
    proposalId: BigNumber;
    proposer: string;
    startTime: BigNumber;
    endTime: BigNumber;
    name: string;
    description: string;
    hashData: string;
  }
>;

export type ProposalCanceledByAdminEvent = TypedEvent<
  [BigNumber, string] & { proposalId: BigNumber; reason: string }
>;

export type UserBannedEvent = TypedEvent<
  [string, string, boolean] & {
    user: string;
    reason: string;
    isBanned: boolean;
  }
>;

export type VotedEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean] & {
    user: string;
    proposalId: BigNumber;
    weight: BigNumber;
    support: boolean;
  }
>;

export class Governor extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: GovernorInterface;

  functions: {
    addProposal(
      _name: string,
      _description: string,
      _hashData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    adminCanceledProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    adminProposalCancel(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ban(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    banList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    canVote(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { isBanned: boolean; isStaker: boolean }>;

    delayPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    getProposalStatus(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number] & { status: number }>;

    initialize(
      _stakingPool: string,
      _delayPeriod: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lastProposalCreateTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    markAsExecuted(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposalCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean,
        boolean
      ] & {
        id: BigNumber;
        proposer: string;
        startTime: BigNumber;
        endTime: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        name: string;
        description: string;
        hashData: string;
        canceled: boolean;
        executed: boolean;
      }
    >;

    proposalsByUsers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userVoteInfo(
      user: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [boolean, boolean, BigNumber] & {
          hasVoted: boolean;
          support: boolean;
          weight: BigNumber;
        }
      ] & {
        voting: [boolean, boolean, BigNumber] & {
          hasVoted: boolean;
          support: boolean;
          weight: BigNumber;
        };
      }
    >;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    votingDetails(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        hasVoted: boolean;
        support: boolean;
        weight: BigNumber;
      }
    >;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    weight(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  addProposal(
    _name: string,
    _description: string,
    _hashData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  adminCanceledProposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  adminProposalCancel(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ban(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  banList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  canVote(
    user: string,
    overrides?: CallOverrides
  ): Promise<[boolean, boolean] & { isBanned: boolean; isStaker: boolean }>;

  delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  getProposalStatus(
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  initialize(
    _stakingPool: string,
    _delayPeriod: BigNumberish,
    _votingPeriod: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lastProposalCreateTime(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  markAsExecuted(
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

  proposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      string,
      string,
      boolean,
      boolean
    ] & {
      id: BigNumber;
      proposer: string;
      startTime: BigNumber;
      endTime: BigNumber;
      forVotes: BigNumber;
      againstVotes: BigNumber;
      name: string;
      description: string;
      hashData: string;
      canceled: boolean;
      executed: boolean;
    }
  >;

  proposalsByUsers(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  stakingPool(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userVoteInfo(
    user: string,
    proposalId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      hasVoted: boolean;
      support: boolean;
      weight: BigNumber;
    }
  >;

  vote(
    proposalId: BigNumberish,
    support: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  votingDetails(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [boolean, boolean, BigNumber] & {
      hasVoted: boolean;
      support: boolean;
      weight: BigNumber;
    }
  >;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  weight(
    user: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addProposal(
      _name: string,
      _description: string,
      _hashData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    adminCanceledProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    adminProposalCancel(
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    ban(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    banList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    canVote(
      user: string,
      overrides?: CallOverrides
    ): Promise<[boolean, boolean] & { isBanned: boolean; isStaker: boolean }>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalStatus(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    initialize(
      _stakingPool: string,
      _delayPeriod: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lastProposalCreateTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markAsExecuted(data: BytesLike, overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        string,
        string,
        boolean,
        boolean
      ] & {
        id: BigNumber;
        proposer: string;
        startTime: BigNumber;
        endTime: BigNumber;
        forVotes: BigNumber;
        againstVotes: BigNumber;
        name: string;
        description: string;
        hashData: string;
        canceled: boolean;
        executed: boolean;
      }
    >;

    proposalsByUsers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stakingPool(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    userVoteInfo(
      user: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        hasVoted: boolean;
        support: boolean;
        weight: BigNumber;
      }
    >;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    votingDetails(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [boolean, boolean, BigNumber] & {
        hasVoted: boolean;
        support: boolean;
        weight: BigNumber;
      }
    >;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    weight(user: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "ProposalAdded(uint256,address,uint256,uint256,string,string,bytes)"(
      proposalId?: null,
      proposer?: null,
      startTime?: null,
      endTime?: null,
      name?: null,
      description?: null,
      hashData?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string, string, string],
      {
        proposalId: BigNumber;
        proposer: string;
        startTime: BigNumber;
        endTime: BigNumber;
        name: string;
        description: string;
        hashData: string;
      }
    >;

    ProposalAdded(
      proposalId?: null,
      proposer?: null,
      startTime?: null,
      endTime?: null,
      name?: null,
      description?: null,
      hashData?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber, string, string, string],
      {
        proposalId: BigNumber;
        proposer: string;
        startTime: BigNumber;
        endTime: BigNumber;
        name: string;
        description: string;
        hashData: string;
      }
    >;

    "ProposalCanceledByAdmin(uint256,string)"(
      proposalId?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; reason: string }
    >;

    ProposalCanceledByAdmin(
      proposalId?: null,
      reason?: null
    ): TypedEventFilter<
      [BigNumber, string],
      { proposalId: BigNumber; reason: string }
    >;

    "UserBanned(address,string,bool)"(
      user?: null,
      reason?: null,
      isBanned?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { user: string; reason: string; isBanned: boolean }
    >;

    UserBanned(
      user?: null,
      reason?: null,
      isBanned?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { user: string; reason: string; isBanned: boolean }
    >;

    "Voted(address,uint256,uint256,bool)"(
      user?: null,
      proposalId?: null,
      weight?: null,
      support?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      {
        user: string;
        proposalId: BigNumber;
        weight: BigNumber;
        support: boolean;
      }
    >;

    Voted(
      user?: null,
      proposalId?: null,
      weight?: null,
      support?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      {
        user: string;
        proposalId: BigNumber;
        weight: BigNumber;
        support: boolean;
      }
    >;
  };

  estimateGas: {
    addProposal(
      _name: string,
      _description: string,
      _hashData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    adminCanceledProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    adminProposalCancel(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ban(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    banList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    canVote(user: string, overrides?: CallOverrides): Promise<BigNumber>;

    delayPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    getProposalStatus(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _stakingPool: string,
      _delayPeriod: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lastProposalCreateTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    markAsExecuted(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCount(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proposalsByUsers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    stakingPool(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userVoteInfo(
      user: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    votingDetails(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    weight(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addProposal(
      _name: string,
      _description: string,
      _hashData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    adminCanceledProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    adminProposalCancel(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ban(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    banList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canVote(
      user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    delayPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProposalStatus(
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _stakingPool: string,
      _delayPeriod: BigNumberish,
      _votingPeriod: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lastProposalCreateTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    markAsExecuted(
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalsByUsers(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    stakingPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userVoteInfo(
      user: string,
      proposalId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vote(
      proposalId: BigNumberish,
      support: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    votingDetails(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weight(
      user: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
