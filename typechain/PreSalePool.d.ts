/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PreSalePoolInterface extends ethers.utils.Interface {
  functions: {
    "buyTokenByEtherWithPermission(address,address,uint256,uint256,bytes)": FunctionFragment;
    "buyTokenByTokenWithPermission(address,address,uint256,address,uint256,uint256,bytes)": FunctionFragment;
    "changeSaleToken(address)": FunctionFragment;
    "claimTokens(address,uint256,bytes)": FunctionFragment;
    "closeTime()": FunctionFragment;
    "emergencyWithdraw(address,uint256)": FunctionFragment;
    "factory()": FunctionFragment;
    "fundingWallet()": FunctionFragment;
    "getAvailableTokensForSale()": FunctionFragment;
    "getClaimMessageHash(address,uint256)": FunctionFragment;
    "getEthSignedMessageHash(bytes32)": FunctionFragment;
    "getMessageHash(address,uint256,uint256)": FunctionFragment;
    "getOfferedCurrencyDecimals(address)": FunctionFragment;
    "getOfferedCurrencyRate(address)": FunctionFragment;
    "getSignerAddress(bytes32,bytes)": FunctionFragment;
    "initialize(address,uint256,uint256,uint256,address,uint256,uint256,address,address)": FunctionFragment;
    "investedAmountOf(address,address)": FunctionFragment;
    "isFinalized()": FunctionFragment;
    "maxCap()": FunctionFragment;
    "offeredCurrencies(address)": FunctionFragment;
    "openTime()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setCloseTime(uint256)": FunctionFragment;
    "setMaxCap(uint256)": FunctionFragment;
    "setNewSigner(address)": FunctionFragment;
    "setOfferedCurrencyDecimals(address,uint256)": FunctionFragment;
    "setOfferedCurrencyRate(address,uint256)": FunctionFragment;
    "setOfferedCurrencyRateAndDecimals(address,uint256,uint256)": FunctionFragment;
    "setOpenTime(uint256)": FunctionFragment;
    "setPoolExtentions(bool)": FunctionFragment;
    "signer()": FunctionFragment;
    "splitSignature(bytes)": FunctionFragment;
    "token()": FunctionFragment;
    "tokenSold()": FunctionFragment;
    "totalUnclaimed()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "useWhitelist()": FunctionFragment;
    "userClaimed(address)": FunctionFragment;
    "userPurchased(address)": FunctionFragment;
    "verify(address,address,uint256,uint256,bytes)": FunctionFragment;
    "verifyClaimToken(address,address,uint256,bytes)": FunctionFragment;
    "weiRaised()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "buyTokenByEtherWithPermission",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "buyTokenByTokenWithPermission",
    values: [
      string,
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "changeSaleToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "claimTokens",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "closeTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "fundingWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableTokensForSale",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimMessageHash",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthSignedMessageHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMessageHash",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferedCurrencyDecimals",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getOfferedCurrencyRate",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getSignerAddress",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "investedAmountOf",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinalized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxCap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offeredCurrencies",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "openTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setCloseTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMaxCap",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setNewSigner",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferedCurrencyDecimals",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferedCurrencyRate",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOfferedCurrencyRateAndDecimals",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setOpenTime",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setPoolExtentions",
    values: [boolean]
  ): string;
  encodeFunctionData(functionFragment: "signer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "splitSignature",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(functionFragment: "tokenSold", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalUnclaimed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "useWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "userClaimed", values: [string]): string;
  encodeFunctionData(
    functionFragment: "userPurchased",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "verify",
    values: [string, string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyClaimToken",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "weiRaised", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "buyTokenByEtherWithPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyTokenByTokenWithPermission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeSaleToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "closeTime", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "fundingWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableTokensForSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getClaimMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthSignedMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMessageHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferedCurrencyDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOfferedCurrencyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getSignerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "investedAmountOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isFinalized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offeredCurrencies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "openTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCloseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setMaxCap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setNewSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferedCurrencyDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferedCurrencyRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOfferedCurrencyRateAndDecimals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOpenTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPoolExtentions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "signer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "splitSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenSold", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalUnclaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "useWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userClaimed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userPurchased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "verify", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "verifyClaimToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weiRaised", data: BytesLike): Result;

  events: {
    "CapacityChanged()": EventFragment;
    "EmergencyWithdraw(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PoolStatsChanged()": EventFragment;
    "PresalePoolCreated(address,uint256,uint256,uint256,address,uint256,uint256,address,address)": EventFragment;
    "TokenChanged(address)": EventFragment;
    "TokenClaimed(address,uint256)": EventFragment;
    "TokenPurchaseByEther(address,address,uint256,uint256)": EventFragment;
    "TokenPurchaseByToken(address,address,address,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CapacityChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolStatsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresalePoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPurchaseByEther"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenPurchaseByToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type CapacityChangedEvent = TypedEvent<[] & {}>;

export type EmergencyWithdrawEvent = TypedEvent<
  [string, BigNumber] & { wallet: string; amount: BigNumber }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PoolStatsChangedEvent = TypedEvent<[] & {}>;

export type PresalePoolCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    BigNumber,
    BigNumber,
    string,
    string
  ] & {
    token: string;
    maxCap: BigNumber;
    openTime: BigNumber;
    closeTime: BigNumber;
    offeredCurrency: string;
    offeredCurrencyDecimals: BigNumber;
    offeredCurrencyRate: BigNumber;
    wallet: string;
    owner: string;
  }
>;

export type TokenChangedEvent = TypedEvent<[string] & { token: string }>;

export type TokenClaimedEvent = TypedEvent<
  [string, BigNumber] & { user: string; amount: BigNumber }
>;

export type TokenPurchaseByEtherEvent = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    purchaser: string;
    beneficiary: string;
    value: BigNumber;
    amount: BigNumber;
  }
>;

export type TokenPurchaseByTokenEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    purchaser: string;
    beneficiary: string;
    token: string;
    value: BigNumber;
    amount: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class PreSalePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PreSalePoolInterface;

  functions: {
    buyTokenByEtherWithPermission(
      _beneficiary: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyTokenByTokenWithPermission(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    changeSaleToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimTokens(
      _candidate: string,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    closeTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    emergencyWithdraw(
      _wallet: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    fundingWallet(overrides?: CallOverrides): Promise<[string]>;

    getAvailableTokensForSale(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { availableTokens: BigNumber }>;

    getClaimMessageHash(
      _candidate: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getMessageHash(
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOfferedCurrencyDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getOfferedCurrencyRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string] & { signer: string }>;

    initialize(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredRate: BigNumberish,
      _offeredCurrencyDecimals: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    investedAmountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isFinalized(overrides?: CallOverrides): Promise<[boolean]>;

    maxCap(overrides?: CallOverrides): Promise<[BigNumber]>;

    offeredCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { decimals: BigNumber; rate: BigNumber }
    >;

    openTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMaxCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNewSigner(
      _newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOfferedCurrencyDecimals(
      _token: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOfferedCurrencyRate(
      _token: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOfferedCurrencyRateAndDecimals(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPoolExtentions(
      _whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    signer(overrides?: CallOverrides): Promise<[string]>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    token(overrides?: CallOverrides): Promise<[string]>;

    tokenSold(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalUnclaimed(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    useWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    userClaimed(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    userPurchased(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    verify(
      _signer: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyClaimToken(
      _signer: string,
      _candidate: string,
      _amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    weiRaised(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  buyTokenByEtherWithPermission(
    _beneficiary: string,
    _candidate: string,
    _maxAmount: BigNumberish,
    _minAmount: BigNumberish,
    _signature: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyTokenByTokenWithPermission(
    _beneficiary: string,
    _token: string,
    _amount: BigNumberish,
    _candidate: string,
    _maxAmount: BigNumberish,
    _minAmount: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  changeSaleToken(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimTokens(
    _candidate: string,
    _amount: BigNumberish,
    _signature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  closeTime(overrides?: CallOverrides): Promise<BigNumber>;

  emergencyWithdraw(
    _wallet: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  fundingWallet(overrides?: CallOverrides): Promise<string>;

  getAvailableTokensForSale(overrides?: CallOverrides): Promise<BigNumber>;

  getClaimMessageHash(
    _candidate: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getEthSignedMessageHash(
    _messageHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  getMessageHash(
    _candidate: string,
    _maxAmount: BigNumberish,
    _minAmount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getOfferedCurrencyDecimals(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getOfferedCurrencyRate(
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getSignerAddress(
    _messageHash: BytesLike,
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _token: string,
    _maxCap: BigNumberish,
    _duration: BigNumberish,
    _openTime: BigNumberish,
    _offeredCurrency: string,
    _offeredRate: BigNumberish,
    _offeredCurrencyDecimals: BigNumberish,
    _wallet: string,
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  investedAmountOf(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  isFinalized(overrides?: CallOverrides): Promise<boolean>;

  maxCap(overrides?: CallOverrides): Promise<BigNumber>;

  offeredCurrencies(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber] & { decimals: BigNumber; rate: BigNumber }>;

  openTime(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCloseTime(
    _closeTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMaxCap(
    _maxCap: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNewSigner(
    _newSigner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOfferedCurrencyDecimals(
    _token: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOfferedCurrencyRate(
    _token: string,
    _rate: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOfferedCurrencyRateAndDecimals(
    _token: string,
    _rate: BigNumberish,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOpenTime(
    _openTime: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPoolExtentions(
    _whitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  splitSignature(
    _signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

  token(overrides?: CallOverrides): Promise<string>;

  tokenSold(overrides?: CallOverrides): Promise<BigNumber>;

  totalUnclaimed(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  useWhitelist(overrides?: CallOverrides): Promise<boolean>;

  userClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  userPurchased(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  verify(
    _signer: string,
    _candidate: string,
    _maxAmount: BigNumberish,
    _minAmount: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyClaimToken(
    _signer: string,
    _candidate: string,
    _amount: BigNumberish,
    signature: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  weiRaised(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buyTokenByEtherWithPermission(
      _beneficiary: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    buyTokenByTokenWithPermission(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    changeSaleToken(_token: string, overrides?: CallOverrides): Promise<void>;

    claimTokens(
      _candidate: string,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    closeTime(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _wallet: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    fundingWallet(overrides?: CallOverrides): Promise<string>;

    getAvailableTokensForSale(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimMessageHash(
      _candidate: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    getMessageHash(
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getOfferedCurrencyDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferedCurrencyRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredRate: BigNumberish,
      _offeredCurrencyDecimals: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<void>;

    investedAmountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<boolean>;

    maxCap(overrides?: CallOverrides): Promise<BigNumber>;

    offeredCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { decimals: BigNumber; rate: BigNumber }
    >;

    openTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMaxCap(_maxCap: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setNewSigner(_newSigner: string, overrides?: CallOverrides): Promise<void>;

    setOfferedCurrencyDecimals(
      _token: string,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfferedCurrencyRate(
      _token: string,
      _rate: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOfferedCurrencyRateAndDecimals(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setPoolExtentions(
      _whitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    signer(overrides?: CallOverrides): Promise<string>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string, string, number] & { r: string; s: string; v: number }>;

    token(overrides?: CallOverrides): Promise<string>;

    tokenSold(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnclaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    useWhitelist(overrides?: CallOverrides): Promise<boolean>;

    userClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userPurchased(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      _signer: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyClaimToken(
      _signer: string,
      _candidate: string,
      _amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "CapacityChanged()"(): TypedEventFilter<[], {}>;

    CapacityChanged(): TypedEventFilter<[], {}>;

    "EmergencyWithdraw(address,uint256)"(
      wallet?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { wallet: string; amount: BigNumber }
    >;

    EmergencyWithdraw(
      wallet?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { wallet: string; amount: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PoolStatsChanged()"(): TypedEventFilter<[], {}>;

    PoolStatsChanged(): TypedEventFilter<[], {}>;

    "PresalePoolCreated(address,uint256,uint256,uint256,address,uint256,uint256,address,address)"(
      token?: null,
      maxCap?: null,
      openTime?: null,
      closeTime?: null,
      offeredCurrency?: null,
      offeredCurrencyDecimals?: null,
      offeredCurrencyRate?: null,
      wallet?: null,
      owner?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        token: string;
        maxCap: BigNumber;
        openTime: BigNumber;
        closeTime: BigNumber;
        offeredCurrency: string;
        offeredCurrencyDecimals: BigNumber;
        offeredCurrencyRate: BigNumber;
        wallet: string;
        owner: string;
      }
    >;

    PresalePoolCreated(
      token?: null,
      maxCap?: null,
      openTime?: null,
      closeTime?: null,
      offeredCurrency?: null,
      offeredCurrencyDecimals?: null,
      offeredCurrencyRate?: null,
      wallet?: null,
      owner?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        BigNumber,
        BigNumber,
        string,
        string
      ],
      {
        token: string;
        maxCap: BigNumber;
        openTime: BigNumber;
        closeTime: BigNumber;
        offeredCurrency: string;
        offeredCurrencyDecimals: BigNumber;
        offeredCurrencyRate: BigNumber;
        wallet: string;
        owner: string;
      }
    >;

    "TokenChanged(address)"(
      token?: null
    ): TypedEventFilter<[string], { token: string }>;

    TokenChanged(token?: null): TypedEventFilter<[string], { token: string }>;

    "TokenClaimed(address,uint256)"(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    TokenClaimed(
      user?: null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { user: string; amount: BigNumber }
    >;

    "TokenPurchaseByEther(address,address,uint256,uint256)"(
      purchaser?: string | null,
      beneficiary?: string | null,
      value?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        value: BigNumber;
        amount: BigNumber;
      }
    >;

    TokenPurchaseByEther(
      purchaser?: string | null,
      beneficiary?: string | null,
      value?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        value: BigNumber;
        amount: BigNumber;
      }
    >;

    "TokenPurchaseByToken(address,address,address,uint256,uint256)"(
      purchaser?: string | null,
      beneficiary?: string | null,
      token?: null,
      value?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        token: string;
        value: BigNumber;
        amount: BigNumber;
      }
    >;

    TokenPurchaseByToken(
      purchaser?: string | null,
      beneficiary?: string | null,
      token?: null,
      value?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        purchaser: string;
        beneficiary: string;
        token: string;
        value: BigNumber;
        amount: BigNumber;
      }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    buyTokenByEtherWithPermission(
      _beneficiary: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyTokenByTokenWithPermission(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    changeSaleToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimTokens(
      _candidate: string,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    closeTime(overrides?: CallOverrides): Promise<BigNumber>;

    emergencyWithdraw(
      _wallet: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    fundingWallet(overrides?: CallOverrides): Promise<BigNumber>;

    getAvailableTokensForSale(overrides?: CallOverrides): Promise<BigNumber>;

    getClaimMessageHash(
      _candidate: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMessageHash(
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferedCurrencyDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOfferedCurrencyRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredRate: BigNumberish,
      _offeredCurrencyDecimals: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    investedAmountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFinalized(overrides?: CallOverrides): Promise<BigNumber>;

    maxCap(overrides?: CallOverrides): Promise<BigNumber>;

    offeredCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    openTime(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMaxCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNewSigner(
      _newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOfferedCurrencyDecimals(
      _token: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOfferedCurrencyRate(
      _token: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOfferedCurrencyRateAndDecimals(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPoolExtentions(
      _whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    signer(overrides?: CallOverrides): Promise<BigNumber>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    tokenSold(overrides?: CallOverrides): Promise<BigNumber>;

    totalUnclaimed(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    useWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    userClaimed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    userPurchased(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    verify(
      _signer: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyClaimToken(
      _signer: string,
      _candidate: string,
      _amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    weiRaised(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokenByEtherWithPermission(
      _beneficiary: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyTokenByTokenWithPermission(
      _beneficiary: string,
      _token: string,
      _amount: BigNumberish,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    changeSaleToken(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimTokens(
      _candidate: string,
      _amount: BigNumberish,
      _signature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    closeTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    emergencyWithdraw(
      _wallet: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundingWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAvailableTokensForSale(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getClaimMessageHash(
      _candidate: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthSignedMessageHash(
      _messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMessageHash(
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferedCurrencyDecimals(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOfferedCurrencyRate(
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSignerAddress(
      _messageHash: BytesLike,
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredRate: BigNumberish,
      _offeredCurrencyDecimals: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    investedAmountOf(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFinalized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxCap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offeredCurrencies(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    openTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCloseTime(
      _closeTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMaxCap(
      _maxCap: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNewSigner(
      _newSigner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOfferedCurrencyDecimals(
      _token: string,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOfferedCurrencyRate(
      _token: string,
      _rate: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOfferedCurrencyRateAndDecimals(
      _token: string,
      _rate: BigNumberish,
      _decimals: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOpenTime(
      _openTime: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPoolExtentions(
      _whitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    signer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    splitSignature(
      _signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenSold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalUnclaimed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    useWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userClaimed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userPurchased(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verify(
      _signer: string,
      _candidate: string,
      _maxAmount: BigNumberish,
      _minAmount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyClaimToken(
      _signer: string,
      _candidate: string,
      _amount: BigNumberish,
      signature: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    weiRaised(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
