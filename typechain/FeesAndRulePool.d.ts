/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface FeesAndRulePoolInterface extends ethers.utils.Interface {
  functions: {
    "MAX_FEE()": FunctionFragment;
    "PERCENTAGE_CONST()": FunctionFragment;
    "__FeesAndRulePool_init(address,address)": FunctionFragment;
    "_treasury()": FunctionFragment;
    "_treasuryFee()": FunctionFragment;
    "commonAmount()": FunctionFragment;
    "commonBalanceOf(address)": FunctionFragment;
    "deposit(uint256,uint256)": FunctionFragment;
    "feeDepositEnabled()": FunctionFragment;
    "feeReceiverAddress()": FunctionFragment;
    "feeUnstakeEnabled()": FunctionFragment;
    "linearAcceptedToken()": FunctionFragment;
    "linearAddPool(uint256,uint64,uint256)": FunctionFragment;
    "linearBalanceOf(uint256,address)": FunctionFragment;
    "linearFlexLockDuration()": FunctionFragment;
    "linearPendingReward(uint256,address)": FunctionFragment;
    "linearPoolInfo(uint256)": FunctionFragment;
    "linearPoolLength()": FunctionFragment;
    "linearRewardDistributor()": FunctionFragment;
    "linearSetFeeReceiverAddress(address)": FunctionFragment;
    "linearSetFlexLockDuration(uint256)": FunctionFragment;
    "linearSetPool(uint256,uint64,uint64,uint256,bool)": FunctionFragment;
    "linearSetRewardDistributor(address)": FunctionFragment;
    "linearStakingData(uint256,address)": FunctionFragment;
    "linearTotalStaked(uint256)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256,uint256)": FunctionFragment;
    "updateFeeAndStatus(bool,bool,uint64,address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "MAX_FEE", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "PERCENTAGE_CONST",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__FeesAndRulePool_init",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "_treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commonAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "commonBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "feeDepositEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeReceiverAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeUnstakeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linearAcceptedToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linearAddPool",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "linearBalanceOf",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "linearFlexLockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linearPendingReward",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "linearPoolInfo",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "linearPoolLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linearRewardDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "linearSetFeeReceiverAddress",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "linearSetFlexLockDuration",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "linearSetPool",
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "linearSetRewardDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "linearStakingData",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "linearTotalStaked",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFeeAndStatus",
    values: [boolean, boolean, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "MAX_FEE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "PERCENTAGE_CONST",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__FeesAndRulePool_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commonAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "commonBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeDepositEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeUnstakeEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearAcceptedToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearAddPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearFlexLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearPendingReward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearPoolInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearPoolLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearSetFeeReceiverAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearSetFlexLockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearSetPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearSetRewardDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearStakingData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "linearTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateFeeAndStatus",
    data: BytesLike
  ): Result;

  events: {
    "FeeDeposit(uint256,uint256)": EventFragment;
    "FeeWithdraw(uint256,uint256)": EventFragment;
    "LinearDeposit(uint256,address,uint256)": EventFragment;
    "LinearPoolCreated(uint256,uint256)": EventFragment;
    "LinearPoolUpdated(uint256,uint64,uint256,bool)": EventFragment;
    "LinearRewardsHarvested(uint256,address,uint256)": EventFragment;
    "LinearWithdraw(uint256,address,uint256,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "UpdateFeeAndStatus(bool,bool,uint64,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FeeDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinearDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinearPoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinearPoolUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinearRewardsHarvested"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LinearWithdraw"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UpdateFeeAndStatus"): EventFragment;
}

export type FeeDepositEvent = TypedEvent<
  [BigNumber, BigNumber] & { amount: BigNumber; tresuryFee: BigNumber }
>;

export type FeeWithdrawEvent = TypedEvent<
  [BigNumber, BigNumber] & { amount: BigNumber; tresuryFee: BigNumber }
>;

export type LinearDepositEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
  }
>;

export type LinearPoolCreatedEvent = TypedEvent<
  [BigNumber, BigNumber] & { poolId: BigNumber; APR: BigNumber }
>;

export type LinearPoolUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, boolean] & {
    poolId: BigNumber;
    unstakeFee: BigNumber;
    minInvestment: BigNumber;
    extendedPeriod: boolean;
  }
>;

export type LinearRewardsHarvestedEvent = TypedEvent<
  [BigNumber, string, BigNumber] & {
    poolId: BigNumber;
    account: string;
    reward: BigNumber;
  }
>;

export type LinearWithdrawEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber] & {
    poolId: BigNumber;
    account: string;
    amount: BigNumber;
    fee: BigNumber;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type UpdateFeeAndStatusEvent = TypedEvent<
  [boolean, boolean, BigNumber, string] & {
    depositStatus: boolean;
    unstakeStatus: boolean;
    fee: BigNumber;
    treasury: string;
  }
>;

export class FeesAndRulePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: FeesAndRulePoolInterface;

  functions: {
    MAX_FEE(overrides?: CallOverrides): Promise<[BigNumber]>;

    PERCENTAGE_CONST(overrides?: CallOverrides): Promise<[BigNumber]>;

    __FeesAndRulePool_init(
      treasuryPool: string,
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    _treasury(overrides?: CallOverrides): Promise<[string]>;

    _treasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    commonAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    commonBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeDepositEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    feeReceiverAddress(overrides?: CallOverrides): Promise<[string]>;

    feeUnstakeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    linearAcceptedToken(overrides?: CallOverrides): Promise<[string]>;

    linearAddPool(
      _minInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linearBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    linearFlexLockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    linearPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { reward: BigNumber }>;

    linearPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        totalStaked: BigNumber;
        minInvestment: BigNumber;
        APR: BigNumber;
        lockDuration: BigNumber;
        extendedPeriod: boolean;
        unstakeFee: BigNumber;
      }
    >;

    linearPoolLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    linearRewardDistributor(overrides?: CallOverrides): Promise<[string]>;

    linearSetFeeReceiverAddress(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linearSetFlexLockDuration(
      _flexLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linearSetPool(
      _poolId: BigNumberish,
      _apr: BigNumberish,
      _unstakeFee: BigNumberish,
      _minInvestment: BigNumberish,
      _extendedPeriod: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linearSetRewardDistributor(
      _linearRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    linearStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        joinTime: BigNumber;
        updatedTime: BigNumber;
        userMinInvestment: BigNumber;
      }
    >;

    linearTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unstake(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateFeeAndStatus(
      _depositStatus: boolean,
      _unstakeStatus: boolean,
      _fee: BigNumberish,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

  PERCENTAGE_CONST(overrides?: CallOverrides): Promise<BigNumber>;

  __FeesAndRulePool_init(
    treasuryPool: string,
    _acceptedToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  _treasury(overrides?: CallOverrides): Promise<string>;

  _treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  commonAmount(overrides?: CallOverrides): Promise<BigNumber>;

  commonBalanceOf(
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeDepositEnabled(overrides?: CallOverrides): Promise<boolean>;

  feeReceiverAddress(overrides?: CallOverrides): Promise<string>;

  feeUnstakeEnabled(overrides?: CallOverrides): Promise<boolean>;

  linearAcceptedToken(overrides?: CallOverrides): Promise<string>;

  linearAddPool(
    _minInvestment: BigNumberish,
    _APR: BigNumberish,
    _lockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linearBalanceOf(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  linearFlexLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  linearPendingReward(
    _poolId: BigNumberish,
    _account: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  linearPoolInfo(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
      totalStaked: BigNumber;
      minInvestment: BigNumber;
      APR: BigNumber;
      lockDuration: BigNumber;
      extendedPeriod: boolean;
      unstakeFee: BigNumber;
    }
  >;

  linearPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

  linearRewardDistributor(overrides?: CallOverrides): Promise<string>;

  linearSetFeeReceiverAddress(
    _receiver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linearSetFlexLockDuration(
    _flexLockDuration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linearSetPool(
    _poolId: BigNumberish,
    _apr: BigNumberish,
    _unstakeFee: BigNumberish,
    _minInvestment: BigNumberish,
    _extendedPeriod: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linearSetRewardDistributor(
    _linearRewardDistributor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  linearStakingData(
    arg0: BigNumberish,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      balance: BigNumber;
      joinTime: BigNumber;
      updatedTime: BigNumber;
      userMinInvestment: BigNumber;
    }
  >;

  linearTotalStaked(
    _poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unstake(
    _poolId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateFeeAndStatus(
    _depositStatus: boolean,
    _unstakeStatus: boolean,
    _fee: BigNumberish,
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_CONST(overrides?: CallOverrides): Promise<BigNumber>;

    __FeesAndRulePool_init(
      treasuryPool: string,
      _acceptedToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    _treasury(overrides?: CallOverrides): Promise<string>;

    _treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    commonAmount(overrides?: CallOverrides): Promise<BigNumber>;

    commonBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feeDepositEnabled(overrides?: CallOverrides): Promise<boolean>;

    feeReceiverAddress(overrides?: CallOverrides): Promise<string>;

    feeUnstakeEnabled(overrides?: CallOverrides): Promise<boolean>;

    linearAcceptedToken(overrides?: CallOverrides): Promise<string>;

    linearAddPool(
      _minInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    linearBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linearFlexLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    linearPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linearPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, boolean, BigNumber] & {
        totalStaked: BigNumber;
        minInvestment: BigNumber;
        APR: BigNumber;
        lockDuration: BigNumber;
        extendedPeriod: boolean;
        unstakeFee: BigNumber;
      }
    >;

    linearPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    linearRewardDistributor(overrides?: CallOverrides): Promise<string>;

    linearSetFeeReceiverAddress(
      _receiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    linearSetFlexLockDuration(
      _flexLockDuration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    linearSetPool(
      _poolId: BigNumberish,
      _apr: BigNumberish,
      _unstakeFee: BigNumberish,
      _minInvestment: BigNumberish,
      _extendedPeriod: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    linearSetRewardDistributor(
      _linearRewardDistributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    linearStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        balance: BigNumber;
        joinTime: BigNumber;
        updatedTime: BigNumber;
        userMinInvestment: BigNumber;
      }
    >;

    linearTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFeeAndStatus(
      _depositStatus: boolean,
      _unstakeStatus: boolean,
      _fee: BigNumberish,
      treasury: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "FeeDeposit(uint256,uint256)"(
      amount?: null,
      tresuryFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; tresuryFee: BigNumber }
    >;

    FeeDeposit(
      amount?: null,
      tresuryFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; tresuryFee: BigNumber }
    >;

    "FeeWithdraw(uint256,uint256)"(
      amount?: null,
      tresuryFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; tresuryFee: BigNumber }
    >;

    FeeWithdraw(
      amount?: null,
      tresuryFee?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { amount: BigNumber; tresuryFee: BigNumber }
    >;

    "LinearDeposit(uint256,address,uint256)"(
      poolId?: null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { poolId: BigNumber; account: string; amount: BigNumber }
    >;

    LinearDeposit(
      poolId?: null,
      account?: string | null,
      amount?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { poolId: BigNumber; account: string; amount: BigNumber }
    >;

    "LinearPoolCreated(uint256,uint256)"(
      poolId?: BigNumberish | null,
      APR?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { poolId: BigNumber; APR: BigNumber }
    >;

    LinearPoolCreated(
      poolId?: BigNumberish | null,
      APR?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { poolId: BigNumber; APR: BigNumber }
    >;

    "LinearPoolUpdated(uint256,uint64,uint256,bool)"(
      poolId?: BigNumberish | null,
      unstakeFee?: null,
      minInvestment?: null,
      extendedPeriod?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      {
        poolId: BigNumber;
        unstakeFee: BigNumber;
        minInvestment: BigNumber;
        extendedPeriod: boolean;
      }
    >;

    LinearPoolUpdated(
      poolId?: BigNumberish | null,
      unstakeFee?: null,
      minInvestment?: null,
      extendedPeriod?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, boolean],
      {
        poolId: BigNumber;
        unstakeFee: BigNumber;
        minInvestment: BigNumber;
        extendedPeriod: boolean;
      }
    >;

    "LinearRewardsHarvested(uint256,address,uint256)"(
      poolId?: null,
      account?: string | null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { poolId: BigNumber; account: string; reward: BigNumber }
    >;

    LinearRewardsHarvested(
      poolId?: null,
      account?: string | null,
      reward?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber],
      { poolId: BigNumber; account: string; reward: BigNumber }
    >;

    "LinearWithdraw(uint256,address,uint256,uint256)"(
      poolId?: null,
      account?: string | null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      { poolId: BigNumber; account: string; amount: BigNumber; fee: BigNumber }
    >;

    LinearWithdraw(
      poolId?: null,
      account?: string | null,
      amount?: null,
      fee?: null
    ): TypedEventFilter<
      [BigNumber, string, BigNumber, BigNumber],
      { poolId: BigNumber; account: string; amount: BigNumber; fee: BigNumber }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "UpdateFeeAndStatus(bool,bool,uint64,address)"(
      depositStatus?: null,
      unstakeStatus?: null,
      fee?: null,
      treasury?: null
    ): TypedEventFilter<
      [boolean, boolean, BigNumber, string],
      {
        depositStatus: boolean;
        unstakeStatus: boolean;
        fee: BigNumber;
        treasury: string;
      }
    >;

    UpdateFeeAndStatus(
      depositStatus?: null,
      unstakeStatus?: null,
      fee?: null,
      treasury?: null
    ): TypedEventFilter<
      [boolean, boolean, BigNumber, string],
      {
        depositStatus: boolean;
        unstakeStatus: boolean;
        fee: BigNumber;
        treasury: string;
      }
    >;
  };

  estimateGas: {
    MAX_FEE(overrides?: CallOverrides): Promise<BigNumber>;

    PERCENTAGE_CONST(overrides?: CallOverrides): Promise<BigNumber>;

    __FeesAndRulePool_init(
      treasuryPool: string,
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    _treasury(overrides?: CallOverrides): Promise<BigNumber>;

    _treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    commonAmount(overrides?: CallOverrides): Promise<BigNumber>;

    commonBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeDepositEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    feeReceiverAddress(overrides?: CallOverrides): Promise<BigNumber>;

    feeUnstakeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    linearAcceptedToken(overrides?: CallOverrides): Promise<BigNumber>;

    linearAddPool(
      _minInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linearBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linearFlexLockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    linearPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linearPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linearPoolLength(overrides?: CallOverrides): Promise<BigNumber>;

    linearRewardDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    linearSetFeeReceiverAddress(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linearSetFlexLockDuration(
      _flexLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linearSetPool(
      _poolId: BigNumberish,
      _apr: BigNumberish,
      _unstakeFee: BigNumberish,
      _minInvestment: BigNumberish,
      _extendedPeriod: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linearSetRewardDistributor(
      _linearRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    linearStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    linearTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unstake(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateFeeAndStatus(
      _depositStatus: boolean,
      _unstakeStatus: boolean,
      _fee: BigNumberish,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    MAX_FEE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERCENTAGE_CONST(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    __FeesAndRulePool_init(
      treasuryPool: string,
      _acceptedToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    _treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commonAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commonBalanceOf(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeDepositEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeReceiverAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeUnstakeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linearAcceptedToken(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linearAddPool(
      _minInvestment: BigNumberish,
      _APR: BigNumberish,
      _lockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linearBalanceOf(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linearFlexLockDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linearPendingReward(
      _poolId: BigNumberish,
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linearPoolInfo(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linearPoolLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    linearRewardDistributor(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linearSetFeeReceiverAddress(
      _receiver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linearSetFlexLockDuration(
      _flexLockDuration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linearSetPool(
      _poolId: BigNumberish,
      _apr: BigNumberish,
      _unstakeFee: BigNumberish,
      _minInvestment: BigNumberish,
      _extendedPeriod: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linearSetRewardDistributor(
      _linearRewardDistributor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    linearStakingData(
      arg0: BigNumberish,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    linearTotalStaked(
      _poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unstake(
      _poolId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateFeeAndStatus(
      _depositStatus: boolean,
      _unstakeStatus: boolean,
      _fee: BigNumberish,
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
