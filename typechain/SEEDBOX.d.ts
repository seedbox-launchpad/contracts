/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SEEDBOXInterface extends ethers.utils.Interface {
  functions: {
    "_treasury()": FunctionFragment;
    "_treasuryFee()": FunctionFragment;
    "acceptRecoveryAdminOwnership(bytes)": FunctionFragment;
    "addBlacklistedContract(address)": FunctionFragment;
    "addFeeChargeAddress(address)": FunctionFragment;
    "admin()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "blacklistedContracts(address)": FunctionFragment;
    "decimals()": FunctionFragment;
    "decreaseAllowance(address,uint256)": FunctionFragment;
    "deleteFeeChargeAddress(address)": FunctionFragment;
    "enableFee(bool)": FunctionFragment;
    "executeLosslessTurnOff()": FunctionFragment;
    "executeLosslessTurnOn()": FunctionFragment;
    "feeCharge(address)": FunctionFragment;
    "feeEnabled()": FunctionFragment;
    "getAdmin()": FunctionFragment;
    "increaseAllowance(address,uint256)": FunctionFragment;
    "init()": FunctionFragment;
    "initialized()": FunctionFragment;
    "isLosslessOn()": FunctionFragment;
    "isLosslessTurnOffProposed()": FunctionFragment;
    "losslessTurnOffTimestamp()": FunctionFragment;
    "maxFee()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "percentageConst()": FunctionFragment;
    "proposeLosslessTurnOff()": FunctionFragment;
    "recoveryAdmin()": FunctionFragment;
    "removeBlacklistedContract(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "sendBack(address)": FunctionFragment;
    "setLosslessAdmin(address)": FunctionFragment;
    "symbol()": FunctionFragment;
    "timelockPeriod()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOutBlacklistedFunds(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "transferRecoveryAdminOwnership(address,bytes32)": FunctionFragment;
    "transferValueToSend(address,uint256)": FunctionFragment;
    "updateFee(uint256)": FunctionFragment;
    "updateTreasury(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "_treasury", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_treasuryFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "acceptRecoveryAdminOwnership",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addBlacklistedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "addFeeChargeAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "blacklistedContracts",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "decreaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deleteFeeChargeAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "enableFee", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "executeLosslessTurnOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "executeLosslessTurnOn",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "feeCharge", values: [string]): string;
  encodeFunctionData(
    functionFragment: "feeEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "increaseAllowance",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "init", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "initialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLosslessOn",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isLosslessTurnOffProposed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "losslessTurnOffTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "maxFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "percentageConst",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeLosslessTurnOff",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recoveryAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeBlacklistedContract",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sendBack", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setLosslessAdmin",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "timelockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOutBlacklistedFunds",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferRecoveryAdminOwnership",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferValueToSend",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTreasury",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "_treasury", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_treasuryFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "acceptRecoveryAdminOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addBlacklistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addFeeChargeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "blacklistedContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "decreaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteFeeChargeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "enableFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeLosslessTurnOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeLosslessTurnOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feeCharge", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeEnabled", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseAllowance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "init", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLosslessOn",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLosslessTurnOffProposed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "losslessTurnOffTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "maxFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "percentageConst",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeLosslessTurnOff",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoveryAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeBlacklistedContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sendBack", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setLosslessAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timelockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOutBlacklistedFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferRecoveryAdminOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferValueToSend",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateTreasury",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "Approval(address,address,uint256)": EventFragment;
    "LosslessTurnOffProposed(uint256)": EventFragment;
    "LosslessTurnedOff()": EventFragment;
    "LosslessTurnedOn()": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RecoveryAdminChangeProposed(address)": EventFragment;
    "RecoveryAdminChanged(address,address)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTurnOffProposed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTurnedOff"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LosslessTurnedOn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RecoveryAdminChangeProposed"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RecoveryAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type AdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber] & {
    owner: string;
    spender: string;
    value: BigNumber;
  }
>;

export type LosslessTurnOffProposedEvent = TypedEvent<
  [BigNumber] & { turnOffDate: BigNumber }
>;

export type LosslessTurnedOffEvent = TypedEvent<[] & {}>;

export type LosslessTurnedOnEvent = TypedEvent<[] & {}>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type RecoveryAdminChangeProposedEvent = TypedEvent<
  [string] & { candidate: string }
>;

export type RecoveryAdminChangedEvent = TypedEvent<
  [string, string] & { previousAdmin: string; newAdmin: string }
>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber] & { from: string; to: string; value: BigNumber }
>;

export class SEEDBOX extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SEEDBOXInterface;

  functions: {
    _treasury(overrides?: CallOverrides): Promise<[string]>;

    _treasuryFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addBlacklistedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addFeeChargeAddress(
      _free: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    admin(overrides?: CallOverrides): Promise<[string]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    blacklistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    deleteFeeChargeAddress(
      _free: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    enableFee(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeLosslessTurnOn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    feeCharge(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    feeEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    getAdmin(overrides?: CallOverrides): Promise<[string]>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    initialized(overrides?: CallOverrides): Promise<[boolean]>;

    isLosslessOn(overrides?: CallOverrides): Promise<[boolean]>;

    isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<[boolean]>;

    losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    maxFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    percentageConst(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<[string]>;

    removeBlacklistedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sendBack(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    timelockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferValueToSend(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  _treasury(overrides?: CallOverrides): Promise<string>;

  _treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

  acceptRecoveryAdminOwnership(
    key: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addBlacklistedContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addFeeChargeAddress(
    _free: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  admin(overrides?: CallOverrides): Promise<string>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  blacklistedContracts(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  decimals(overrides?: CallOverrides): Promise<number>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  deleteFeeChargeAddress(
    _free: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  enableFee(
    status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeLosslessTurnOff(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeLosslessTurnOn(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  feeCharge(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  feeEnabled(overrides?: CallOverrides): Promise<boolean>;

  getAdmin(overrides?: CallOverrides): Promise<string>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  init(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  initialized(overrides?: CallOverrides): Promise<boolean>;

  isLosslessOn(overrides?: CallOverrides): Promise<boolean>;

  isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<boolean>;

  losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  maxFee(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  percentageConst(overrides?: CallOverrides): Promise<BigNumber>;

  proposeLosslessTurnOff(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  recoveryAdmin(overrides?: CallOverrides): Promise<string>;

  removeBlacklistedContract(
    _contract: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sendBack(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLosslessAdmin(
    newAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  timelockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOutBlacklistedFunds(
    from: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferRecoveryAdminOwnership(
    candidate: string,
    keyHash: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferValueToSend(
    sender: string,
    amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTreasury(
    treasury: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    _treasury(overrides?: CallOverrides): Promise<string>;

    _treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    addBlacklistedContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    addFeeChargeAddress(
      _free: string,
      overrides?: CallOverrides
    ): Promise<void>;

    admin(overrides?: CallOverrides): Promise<string>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    decimals(overrides?: CallOverrides): Promise<number>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    deleteFeeChargeAddress(
      _free: string,
      overrides?: CallOverrides
    ): Promise<void>;

    enableFee(status: boolean, overrides?: CallOverrides): Promise<void>;

    executeLosslessTurnOff(overrides?: CallOverrides): Promise<void>;

    executeLosslessTurnOn(overrides?: CallOverrides): Promise<void>;

    feeCharge(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    feeEnabled(overrides?: CallOverrides): Promise<boolean>;

    getAdmin(overrides?: CallOverrides): Promise<string>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    init(overrides?: CallOverrides): Promise<void>;

    initialized(overrides?: CallOverrides): Promise<boolean>;

    isLosslessOn(overrides?: CallOverrides): Promise<boolean>;

    isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<boolean>;

    losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    maxFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    percentageConst(overrides?: CallOverrides): Promise<BigNumber>;

    proposeLosslessTurnOff(overrides?: CallOverrides): Promise<void>;

    recoveryAdmin(overrides?: CallOverrides): Promise<string>;

    removeBlacklistedContract(
      _contract: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    sendBack(_token: string, overrides?: CallOverrides): Promise<boolean>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    timelockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    transferValueToSend(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateTreasury(treasury: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    AdminChanged(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { owner: string; spender: string; value: BigNumber }
    >;

    "LosslessTurnOffProposed(uint256)"(
      turnOffDate?: null
    ): TypedEventFilter<[BigNumber], { turnOffDate: BigNumber }>;

    LosslessTurnOffProposed(
      turnOffDate?: null
    ): TypedEventFilter<[BigNumber], { turnOffDate: BigNumber }>;

    "LosslessTurnedOff()"(): TypedEventFilter<[], {}>;

    LosslessTurnedOff(): TypedEventFilter<[], {}>;

    "LosslessTurnedOn()"(): TypedEventFilter<[], {}>;

    LosslessTurnedOn(): TypedEventFilter<[], {}>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "RecoveryAdminChangeProposed(address)"(
      candidate?: string | null
    ): TypedEventFilter<[string], { candidate: string }>;

    RecoveryAdminChangeProposed(
      candidate?: string | null
    ): TypedEventFilter<[string], { candidate: string }>;

    "RecoveryAdminChanged(address,address)"(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    RecoveryAdminChanged(
      previousAdmin?: string | null,
      newAdmin?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousAdmin: string; newAdmin: string }
    >;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;

    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { from: string; to: string; value: BigNumber }
    >;
  };

  estimateGas: {
    _treasury(overrides?: CallOverrides): Promise<BigNumber>;

    _treasuryFee(overrides?: CallOverrides): Promise<BigNumber>;

    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addBlacklistedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addFeeChargeAddress(
      _free: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    admin(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    blacklistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    deleteFeeChargeAddress(
      _free: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    enableFee(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeLosslessTurnOn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    feeCharge(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    getAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    initialized(overrides?: CallOverrides): Promise<BigNumber>;

    isLosslessOn(overrides?: CallOverrides): Promise<BigNumber>;

    isLosslessTurnOffProposed(overrides?: CallOverrides): Promise<BigNumber>;

    losslessTurnOffTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    maxFee(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    percentageConst(overrides?: CallOverrides): Promise<BigNumber>;

    proposeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    recoveryAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    removeBlacklistedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sendBack(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    timelockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferValueToSend(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _treasury(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _treasuryFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    acceptRecoveryAdminOwnership(
      key: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addBlacklistedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addFeeChargeAddress(
      _free: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    blacklistedContracts(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    deleteFeeChargeAddress(
      _free: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    enableFee(
      status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeLosslessTurnOn(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    feeCharge(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    init(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    initialized(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLosslessOn(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isLosslessTurnOffProposed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    losslessTurnOffTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    maxFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    percentageConst(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeLosslessTurnOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    recoveryAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeBlacklistedContract(
      _contract: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sendBack(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLosslessAdmin(
      newAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    timelockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOutBlacklistedFunds(
      from: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferRecoveryAdminOwnership(
      candidate: string,
      keyHash: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferValueToSend(
      sender: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTreasury(
      treasury: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
