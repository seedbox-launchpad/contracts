/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RedKiteTiersInterface extends ethers.utils.Interface {
  functions: {
    "PKF()": FunctionFragment;
    "addExternalToken(address,uint256,uint256,bool,bool)": FunctionFragment;
    "calculateWithdrawFee(address,address,uint256)": FunctionFragment;
    "canEmergencyWithdraw()": FunctionFragment;
    "daysLockLevel(uint256)": FunctionFragment;
    "depositBatchERC721(address,uint128[])": FunctionFragment;
    "depositERC20(address,uint256)": FunctionFragment;
    "depositSingleERC721(address,uint128)": FunctionFragment;
    "emergencyWithdrawERC20(address)": FunctionFragment;
    "emergencyWithdrawERC721(address,uint128[])": FunctionFragment;
    "externalToken(address)": FunctionFragment;
    "getTiers()": FunctionFragment;
    "getUserTier(address)": FunctionFragment;
    "onERC721Received(address,address,uint256,bytes)": FunctionFragment;
    "owner()": FunctionFragment;
    "penaltyWallet()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setExternalToken(address,uint256,uint256,bool)": FunctionFragment;
    "setPenaltyWallet(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateEmergencyWithdrawStatus(bool)": FunctionFragment;
    "updatePunishTime(uint256,uint256)": FunctionFragment;
    "updateTier(uint8,uint256)": FunctionFragment;
    "updateWithdrawFee(uint256,uint256)": FunctionFragment;
    "userExternalStaked(address)": FunctionFragment;
    "userInfo(address,address)": FunctionFragment;
    "userTotalStaked(address)": FunctionFragment;
    "withdrawBatchERC721(address,uint128[])": FunctionFragment;
    "withdrawERC20(address,uint256)": FunctionFragment;
    "withdrawFeePercent(uint256)": FunctionFragment;
    "withdrawSingleERC721(address,uint128)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "PKF", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addExternalToken",
    values: [string, BigNumberish, BigNumberish, boolean, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateWithdrawFee",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canEmergencyWithdraw",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "daysLockLevel",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositBatchERC721",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositSingleERC721",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawERC20",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdrawERC721",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "externalToken",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTiers", values?: undefined): string;
  encodeFunctionData(functionFragment: "getUserTier", values: [string]): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [string, string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "penaltyWallet",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setExternalToken",
    values: [string, BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPenaltyWallet",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateEmergencyWithdrawStatus",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "updatePunishTime",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTier",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateWithdrawFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "userExternalStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "userInfo",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "userTotalStaked",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawBatchERC721",
    values: [string, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawERC20",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFeePercent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSingleERC721",
    values: [string, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "PKF", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addExternalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canEmergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "daysLockLevel",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositBatchERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositSingleERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdrawERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "externalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTiers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getUserTier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "penaltyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExternalToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPenaltyWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateEmergencyWithdrawStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatePunishTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "updateTier", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateWithdrawFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userExternalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "userInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawBatchERC721",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawERC20",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFeePercent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSingleERC721",
    data: BytesLike
  ): Result;

  events: {
    "AddExternalToken(address,uint256,uint256,bool,bool)": EventFragment;
    "ChangePenaltyWallet(address)": EventFragment;
    "EmergencyWithdrawnERC20(address,address,uint256,uint256)": EventFragment;
    "EmergencyWithdrawnERC721(address,address,uint128[],uint256)": EventFragment;
    "ExternalTokenStatsChange(address,uint256,uint256,bool)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "StakedBatchERC721(address,address,uint128[])": EventFragment;
    "StakedERC20(address,address,uint256)": EventFragment;
    "StakedSingleERC721(address,address,uint128)": EventFragment;
    "WithdrawnBatchERC721(address,address,uint128[],uint256)": EventFragment;
    "WithdrawnERC20(address,address,uint256,uint256,uint256)": EventFragment;
    "WithdrawnSingleERC721(address,address,uint128,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddExternalToken"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangePenaltyWallet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawnERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EmergencyWithdrawnERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExternalTokenStatsChange"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedBatchERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakedSingleERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnBatchERC721"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnERC20"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WithdrawnSingleERC721"): EventFragment;
}

export type AddExternalTokenEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean, boolean] & {
    token: string;
    decimals: BigNumber;
    rate: BigNumber;
    isERC721: boolean;
    canStake: boolean;
  }
>;

export type ChangePenaltyWalletEvent = TypedEvent<
  [string] & { penaltyWallet: string }
>;

export type EmergencyWithdrawnERC20Event = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    user: string;
    token: string;
    amount: BigNumber;
    lastStakedTime: BigNumber;
  }
>;

export type EmergencyWithdrawnERC721Event = TypedEvent<
  [string, string, BigNumber[], BigNumber] & {
    user: string;
    token: string;
    tokenIds: BigNumber[];
    lastStakedTime: BigNumber;
  }
>;

export type ExternalTokenStatsChangeEvent = TypedEvent<
  [string, BigNumber, BigNumber, boolean] & {
    token: string;
    decimals: BigNumber;
    rate: BigNumber;
    canStake: boolean;
  }
>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type StakedBatchERC721Event = TypedEvent<
  [string, string, BigNumber[]] & {
    user: string;
    token: string;
    tokenIds: BigNumber[];
  }
>;

export type StakedERC20Event = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    token: string;
    amount: BigNumber;
  }
>;

export type StakedSingleERC721Event = TypedEvent<
  [string, string, BigNumber] & {
    user: string;
    token: string;
    tokenId: BigNumber;
  }
>;

export type WithdrawnBatchERC721Event = TypedEvent<
  [string, string, BigNumber[], BigNumber] & {
    user: string;
    token: string;
    tokenIds: BigNumber[];
    lastStakedTime: BigNumber;
  }
>;

export type WithdrawnERC20Event = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber] & {
    user: string;
    token: string;
    amount: BigNumber;
    fee: BigNumber;
    lastStakedTime: BigNumber;
  }
>;

export type WithdrawnSingleERC721Event = TypedEvent<
  [string, string, BigNumber, BigNumber] & {
    user: string;
    token: string;
    tokenId: BigNumber;
    lastStakedTime: BigNumber;
  }
>;

export class RedKiteTiers extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RedKiteTiersInterface;

  functions: {
    PKF(overrides?: CallOverrides): Promise<[string]>;

    addExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _isERC721: boolean,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateWithdrawFee(
      _userAddress: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    canEmergencyWithdraw(overrides?: CallOverrides): Promise<[boolean]>;

    daysLockLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    emergencyWithdrawERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    externalToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean] & {
        contractAddress: string;
        decimals: BigNumber;
        rate: BigNumber;
        isERC721: boolean;
        canStake: boolean;
      }
    >;

    getTiers(
      overrides?: CallOverrides
    ): Promise<
      [
        [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ]
      ] & {
        buf: [
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber
        ];
      }
    >;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[number] & { res: number }>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    penaltyWallet(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPenaltyWallet(
      _penaltyWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updatePunishTime(
      _key: BigNumberish,
      _days: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    updateWithdrawFee(
      _key: BigNumberish,
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    userExternalStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; stakedTime: BigNumber }
    >;

    userTotalStaked(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdrawSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  PKF(overrides?: CallOverrides): Promise<string>;

  addExternalToken(
    _token: string,
    _decimals: BigNumberish,
    _rate: BigNumberish,
    _isERC721: boolean,
    _canStake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateWithdrawFee(
    _userAddress: string,
    _token: string,
    _amount: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  canEmergencyWithdraw(overrides?: CallOverrides): Promise<boolean>;

  daysLockLevel(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  depositBatchERC721(
    _token: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositERC20(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositSingleERC721(
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawERC20(
    _token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  emergencyWithdrawERC721(
    _token: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  externalToken(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, boolean, boolean] & {
      contractAddress: string;
      decimals: BigNumber;
      rate: BigNumber;
      isERC721: boolean;
      canStake: boolean;
    }
  >;

  getTiers(
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ]
  >;

  getUserTier(_userAddress: string, overrides?: CallOverrides): Promise<number>;

  onERC721Received(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  penaltyWallet(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setExternalToken(
    _token: string,
    _decimals: BigNumberish,
    _rate: BigNumberish,
    _canStake: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPenaltyWallet(
    _penaltyWallet: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateEmergencyWithdrawStatus(
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updatePunishTime(
    _key: BigNumberish,
    _days: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateTier(
    _tierId: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  updateWithdrawFee(
    _key: BigNumberish,
    _percent: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  userExternalStaked(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  userInfo(
    arg0: string,
    arg1: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { staked: BigNumber; stakedTime: BigNumber }
  >;

  userTotalStaked(
    _userAddress: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawBatchERC721(
    _token: string,
    _tokenIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawERC20(
    _token: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFeePercent(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  withdrawSingleERC721(
    _token: string,
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    PKF(overrides?: CallOverrides): Promise<string>;

    addExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _isERC721: boolean,
      _canStake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateWithdrawFee(
      _userAddress: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canEmergencyWithdraw(overrides?: CallOverrides): Promise<boolean>;

    daysLockLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawERC20(
      _token: string,
      overrides?: CallOverrides
    ): Promise<void>;

    emergencyWithdrawERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    externalToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, boolean, boolean] & {
        contractAddress: string;
        decimals: BigNumber;
        rate: BigNumber;
        isERC721: boolean;
        canStake: boolean;
      }
    >;

    getTiers(
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ]
    >;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<number>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    penaltyWallet(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _canStake: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPenaltyWallet(
      _penaltyWallet: string,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    updateEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    updatePunishTime(
      _key: BigNumberish,
      _days: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    updateWithdrawFee(
      _key: BigNumberish,
      _percent: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    userExternalStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { staked: BigNumber; stakedTime: BigNumber }
    >;

    userTotalStaked(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddExternalToken(address,uint256,uint256,bool,bool)"(
      token?: string | null,
      decimals?: null,
      rate?: null,
      isERC721?: null,
      canStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean, boolean],
      {
        token: string;
        decimals: BigNumber;
        rate: BigNumber;
        isERC721: boolean;
        canStake: boolean;
      }
    >;

    AddExternalToken(
      token?: string | null,
      decimals?: null,
      rate?: null,
      isERC721?: null,
      canStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean, boolean],
      {
        token: string;
        decimals: BigNumber;
        rate: BigNumber;
        isERC721: boolean;
        canStake: boolean;
      }
    >;

    "ChangePenaltyWallet(address)"(
      penaltyWallet?: string | null
    ): TypedEventFilter<[string], { penaltyWallet: string }>;

    ChangePenaltyWallet(
      penaltyWallet?: string | null
    ): TypedEventFilter<[string], { penaltyWallet: string }>;

    "EmergencyWithdrawnERC20(address,address,uint256,uint256)"(
      user?: string | null,
      token?: null,
      amount?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        amount: BigNumber;
        lastStakedTime: BigNumber;
      }
    >;

    EmergencyWithdrawnERC20(
      user?: string | null,
      token?: null,
      amount?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        amount: BigNumber;
        lastStakedTime: BigNumber;
      }
    >;

    "EmergencyWithdrawnERC721(address,address,uint128[],uint256)"(
      user?: string | null,
      token?: null,
      tokenIds?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber],
      {
        user: string;
        token: string;
        tokenIds: BigNumber[];
        lastStakedTime: BigNumber;
      }
    >;

    EmergencyWithdrawnERC721(
      user?: string | null,
      token?: null,
      tokenIds?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber],
      {
        user: string;
        token: string;
        tokenIds: BigNumber[];
        lastStakedTime: BigNumber;
      }
    >;

    "ExternalTokenStatsChange(address,uint256,uint256,bool)"(
      token?: string | null,
      decimals?: null,
      rate?: null,
      canStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      { token: string; decimals: BigNumber; rate: BigNumber; canStake: boolean }
    >;

    ExternalTokenStatsChange(
      token?: string | null,
      decimals?: null,
      rate?: null,
      canStake?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, boolean],
      { token: string; decimals: BigNumber; rate: BigNumber; canStake: boolean }
    >;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "StakedBatchERC721(address,address,uint128[])"(
      user?: string | null,
      token?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { user: string; token: string; tokenIds: BigNumber[] }
    >;

    StakedBatchERC721(
      user?: string | null,
      token?: null,
      tokenIds?: null
    ): TypedEventFilter<
      [string, string, BigNumber[]],
      { user: string; token: string; tokenIds: BigNumber[] }
    >;

    "StakedERC20(address,address,uint256)"(
      user?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    StakedERC20(
      user?: string | null,
      token?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; amount: BigNumber }
    >;

    "StakedSingleERC721(address,address,uint128)"(
      user?: string | null,
      token?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; tokenId: BigNumber }
    >;

    StakedSingleERC721(
      user?: string | null,
      token?: null,
      tokenId?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { user: string; token: string; tokenId: BigNumber }
    >;

    "WithdrawnBatchERC721(address,address,uint128[],uint256)"(
      user?: string | null,
      token?: null,
      tokenIds?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber],
      {
        user: string;
        token: string;
        tokenIds: BigNumber[];
        lastStakedTime: BigNumber;
      }
    >;

    WithdrawnBatchERC721(
      user?: string | null,
      token?: null,
      tokenIds?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber[], BigNumber],
      {
        user: string;
        token: string;
        tokenIds: BigNumber[];
        lastStakedTime: BigNumber;
      }
    >;

    "WithdrawnERC20(address,address,uint256,uint256,uint256)"(
      user?: string | null,
      token?: null,
      amount?: BigNumberish | null,
      fee?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        amount: BigNumber;
        fee: BigNumber;
        lastStakedTime: BigNumber;
      }
    >;

    WithdrawnERC20(
      user?: string | null,
      token?: null,
      amount?: BigNumberish | null,
      fee?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        amount: BigNumber;
        fee: BigNumber;
        lastStakedTime: BigNumber;
      }
    >;

    "WithdrawnSingleERC721(address,address,uint128,uint256)"(
      user?: string | null,
      token?: null,
      tokenId?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        tokenId: BigNumber;
        lastStakedTime: BigNumber;
      }
    >;

    WithdrawnSingleERC721(
      user?: string | null,
      token?: null,
      tokenId?: null,
      lastStakedTime?: null
    ): TypedEventFilter<
      [string, string, BigNumber, BigNumber],
      {
        user: string;
        token: string;
        tokenId: BigNumber;
        lastStakedTime: BigNumber;
      }
    >;
  };

  estimateGas: {
    PKF(overrides?: CallOverrides): Promise<BigNumber>;

    addExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _isERC721: boolean,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateWithdrawFee(
      _userAddress: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    canEmergencyWithdraw(overrides?: CallOverrides): Promise<BigNumber>;

    daysLockLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    emergencyWithdrawERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    externalToken(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getTiers(overrides?: CallOverrides): Promise<BigNumber>;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    penaltyWallet(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPenaltyWallet(
      _penaltyWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updatePunishTime(
      _key: BigNumberish,
      _days: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    updateWithdrawFee(
      _key: BigNumberish,
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    userExternalStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userTotalStaked(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    withdrawSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    PKF(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _isERC721: boolean,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateWithdrawFee(
      _userAddress: string,
      _token: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    canEmergencyWithdraw(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    daysLockLevel(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawERC20(
      _token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    emergencyWithdrawERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    externalToken(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTiers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserTier(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    onERC721Received(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    penaltyWallet(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setExternalToken(
      _token: string,
      _decimals: BigNumberish,
      _rate: BigNumberish,
      _canStake: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPenaltyWallet(
      _penaltyWallet: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateEmergencyWithdrawStatus(
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updatePunishTime(
      _key: BigNumberish,
      _days: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateTier(
      _tierId: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    updateWithdrawFee(
      _key: BigNumberish,
      _percent: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    userExternalStaked(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userInfo(
      arg0: string,
      arg1: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userTotalStaked(
      _userAddress: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawBatchERC721(
      _token: string,
      _tokenIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawERC20(
      _token: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFeePercent(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdrawSingleERC721(
      _token: string,
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
