/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PreSaleFactoryInterface extends ethers.utils.Interface {
  functions: {
    "allPools(uint256)": FunctionFragment;
    "allPoolsLength()": FunctionFragment;
    "getCreatedPoolsByToken(address,address)": FunctionFragment;
    "getCreatedPoolsLengthByToken(address,address)": FunctionFragment;
    "getPools(address,address,uint256)": FunctionFragment;
    "initialize()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "registerPool(address,uint256,uint256,uint256,address,uint256,uint256,address,address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "allPools",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "allPoolsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedPoolsByToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatedPoolsLengthByToken",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPools",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerPool",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      string,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "allPools", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "allPoolsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedPoolsByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatedPoolsLengthByToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPools", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PresalePoolCreated(address,address,address,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PresalePoolCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type PausedEvent = TypedEvent<[string] & { account: string }>;

export type PresalePoolCreatedEvent = TypedEvent<
  [string, string, string, BigNumber] & {
    registedBy: string;
    token: string;
    pool: string;
    poolId: BigNumber;
  }
>;

export type UnpausedEvent = TypedEvent<[string] & { account: string }>;

export class PreSaleFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PreSaleFactoryInterface;

  functions: {
    allPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    allPoolsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCreatedPoolsByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getCreatedPoolsLengthByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    registerPool(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredCurrencyDecimals: BigNumberish,
      _offeredRate: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

  allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getCreatedPoolsByToken(
    _creator: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getCreatedPoolsLengthByToken(
    _creator: string,
    _token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPools(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  registerPool(
    _token: string,
    _maxCap: BigNumberish,
    _duration: BigNumberish,
    _openTime: BigNumberish,
    _offeredCurrency: string,
    _offeredCurrencyDecimals: BigNumberish,
    _offeredRate: BigNumberish,
    _wallet: string,
    _signer: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<string>;

    allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatedPoolsByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getCreatedPoolsLengthByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    registerPool(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredCurrencyDecimals: BigNumberish,
      _offeredRate: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    "Paused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Paused(account?: null): TypedEventFilter<[string], { account: string }>;

    "PresalePoolCreated(address,address,address,uint256)"(
      registedBy?: null,
      token?: string | null,
      pool?: string | null,
      poolId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { registedBy: string; token: string; pool: string; poolId: BigNumber }
    >;

    PresalePoolCreated(
      registedBy?: null,
      token?: string | null,
      pool?: string | null,
      poolId?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber],
      { registedBy: string; token: string; pool: string; poolId: BigNumber }
    >;

    "Unpaused(address)"(
      account?: null
    ): TypedEventFilter<[string], { account: string }>;

    Unpaused(account?: null): TypedEventFilter<[string], { account: string }>;
  };

  estimateGas: {
    allPools(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    allPoolsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatedPoolsByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCreatedPoolsLengthByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    registerPool(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredCurrencyDecimals: BigNumberish,
      _offeredRate: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allPools(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allPoolsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreatedPoolsByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCreatedPoolsLengthByToken(
      _creator: string,
      _token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPools(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerPool(
      _token: string,
      _maxCap: BigNumberish,
      _duration: BigNumberish,
      _openTime: BigNumberish,
      _offeredCurrency: string,
      _offeredCurrencyDecimals: BigNumberish,
      _offeredRate: BigNumberish,
      _wallet: string,
      _signer: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
