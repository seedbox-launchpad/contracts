/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  RedKiteWhitelist,
  RedKiteWhitelistInterface,
} from "../RedKiteWhitelist";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_candidate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "getClaimMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_messageHash",
        type: "bytes32",
      },
    ],
    name: "getEthSignedMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_candidate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_maxAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minAmount",
        type: "uint256",
      },
    ],
    name: "getMessageHash",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "_messageHash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "getSignerAddress",
    outputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "_signature",
        type: "bytes",
      },
    ],
    name: "splitSignature",
    outputs: [
      {
        internalType: "bytes32",
        name: "r",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "s",
        type: "bytes32",
      },
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_candidate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_maxAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_minAmount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_signer",
        type: "address",
      },
      {
        internalType: "address",
        name: "_candidate",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "verifyClaimToken",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610a3a806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063a7bb58031161005b578063a7bb580314610138578063cffc18eb14610169578063d2b0737b1461017c578063fa540801146101d95761007d565b80630f7d8e39146100825780637a3d2767146100b2578063a4fcb3ea14610115575b600080fd5b610095610090366004610997565b6101ec565b6040516001600160a01b0390911681526020015b60405180910390f35b6101076100c0366004610924565b6040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b6040519081526020016100a9565b61012861012336600461084e565b6101ff565b60405190151581526020016100a9565b61014b6101463660046109dc565b610286565b60408051938452602084019290925260ff16908201526060016100a9565b6101286101773660046108b4565b6102ff565b61010761018a36600461094d565b6040516bffffffffffffffffffffffff19606085901b16602082015260348101839052605481018290526000906074016040516020818303038152906040528051906020012090509392505050565b6101076101e736600461097f565b610380565b60006101f883836103e1565b9392505050565b60008061024e85856040516bffffffffffffffffffffffff19606084901b1660208201526034810182905260009060540160405160208183030381529060405280519060200120905092915050565b9050600061025b82610380565b9050866001600160a01b031661027182866101ec565b6001600160a01b031614979650505050505050565b600080600083516041146102e15760405162461bcd60e51b815260206004820152601860248201527f696e76616c6964207369676e6174757265206c656e677468000000000000000060448201526064015b60405180910390fd5b50505060208101516040820151606090920151909260009190911a90565b60408051606086901b6bffffffffffffffffffffffff19166020808301919091526034820186905260548083018690528351808403909101815260749092019092528051910120600090600061035482610380565b9050876001600160a01b031661036a82866101ec565b6001600160a01b03161498975050505050505050565b60006103d9826040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b90505b919050565b60008060006103f08585610405565b915091506103fd81610475565b509392505050565b60008082516041141561043c5760208301516040840151606085015160001a6104308782858561067b565b9450945050505061046e565b825160401415610466576020830151604084015161045b868383610768565b93509350505061046e565b506000905060025b9250929050565b600081600481111561049757634e487b7160e01b600052602160045260246000fd5b14156104a257610678565b60018160048111156104c457634e487b7160e01b600052602160045260246000fd5b14156105125760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e6174757265000000000000000060448201526064016102d8565b600281600481111561053457634e487b7160e01b600052602160045260246000fd5b14156105825760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e6774680060448201526064016102d8565b60038160048111156105a457634e487b7160e01b600052602160045260246000fd5b14156105fd5760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b60648201526084016102d8565b600481600481111561061f57634e487b7160e01b600052602160045260246000fd5b14156106785760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b60648201526084016102d8565b50565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156106b2575060009050600361075f565b8460ff16601b141580156106ca57508460ff16601c14155b156106db575060009050600461075f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa15801561072f573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166107585760006001925092505061075f565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b016107a28782888561067b565b935093505050935093915050565b80356001600160a01b03811681146103dc57600080fd5b600082601f8301126107d7578081fd5b813567ffffffffffffffff808211156107f2576107f2610a17565b604051601f8301601f19908116603f0116810190828211818310171561081a5761081a610a17565b81604052838152866020858801011115610832578485fd5b8360208701602083013792830160200193909352509392505050565b60008060008060808587031215610863578384fd5b61086c856107b0565b935061087a602086016107b0565b925060408501359150606085013567ffffffffffffffff81111561089c578182fd5b6108a8878288016107c7565b91505092959194509250565b600080600080600060a086880312156108cb578081fd5b6108d4866107b0565b94506108e2602087016107b0565b93506040860135925060608601359150608086013567ffffffffffffffff81111561090b578182fd5b610917888289016107c7565b9150509295509295909350565b60008060408385031215610936578182fd5b61093f836107b0565b946020939093013593505050565b600080600060608486031215610961578283fd5b61096a846107b0565b95602085013595506040909401359392505050565b600060208284031215610990578081fd5b5035919050565b600080604083850312156109a9578182fd5b82359150602083013567ffffffffffffffff8111156109c6578182fd5b6109d2858286016107c7565b9150509250929050565b6000602082840312156109ed578081fd5b813567ffffffffffffffff811115610a03578182fd5b610a0f848285016107c7565b949350505050565b634e487b7160e01b600052604160045260246000fdfea164736f6c6343000802000a";

export class RedKiteWhitelist__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<RedKiteWhitelist> {
    return super.deploy(overrides || {}) as Promise<RedKiteWhitelist>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): RedKiteWhitelist {
    return super.attach(address) as RedKiteWhitelist;
  }
  connect(signer: Signer): RedKiteWhitelist__factory {
    return super.connect(signer) as RedKiteWhitelist__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RedKiteWhitelistInterface {
    return new utils.Interface(_abi) as RedKiteWhitelistInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RedKiteWhitelist {
    return new Contract(address, _abi, signerOrProvider) as RedKiteWhitelist;
  }
}
